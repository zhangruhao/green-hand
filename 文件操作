#include<stdio.h>
#include<stdlib.h>
typedef struct student
{
    long ID;//学号
    char name[5];//名字
    int score[3];//成绩：语文，数学，英语
    int sum;//总分
} st;
int main()
{
    st a[99],b[99];//定义结构体用于存放数据。之所以是99，是为了避免内存溢出，其实可以用动态分配内存，但是操作更复杂一点。以后有时间再优化。
    int i,j,max=0,n=0,t=0;
    FILE *fp;
    if((fp=fopen("stu.txt","w"))==NULL)
    {
        printf("文件打开失败，程序错误退出！\n");
        exit(0);
    }
    printf("题目要求十个同学信息，但为了测试方便，该程序为自主选择几个数据，避免测试一次要输入十次的麻烦！\n");
    printf("成都东软学院  计算机科学与技术  二班  张如豪 19310120242\n");
    printf("欢迎使用学生信息管理系统！\n");
    printf("请输入有几个学生：\n");
    scanf("%d",&t);
    fflush(stdin);//scanf不带走缓存区里的回车键，所以清理一下缓存区，避免影响下面的录入。
    for(i=0; i<t; i++)
    {
        scanf("%ld",&a[i].ID);
        scanf("%s",&a[i].name);
        a[i].sum=0;
        for(j=0; j<3; j++)
        {
            scanf("%d",&a[i].score[j]);
            a[i].sum+=a[i].score[j];
        }
    }
    for(i=0; i<t; i++)
    {
        fprintf(fp,"%ld   %4s",a[i].ID,a[i].name);
        for(j=0; j<3; j++)
        {
            fprintf(fp,"%8d",a[i].score[j]);
        }
        fprintf(fp,"%8d\n",a[i].sum);
    }
    fclose(fp);
    printf("温馨提示：生成的学生文件与该程序源代码同一路径下\n");//根据C语言的规则，未指定存放路径，则默认与源代码同路径。
    if((fp=fopen("stu.txt","r"))==NULL)
    {
        printf("文件打开失败，程序错误退出！\n");
        exit(0);
    }
    fflush(stdin);//原本想再文本里也录入学号    姓名    语文    数学    英语   总分，但是fscanf只能从首行录入，会出现乱码，所以作罢，
    //文件的随机读取还未掌握，等有时间优化一下，这样可以更人性化一点。
    for(i=0;i<t;i++)
    {
        fscanf(fp,"%ld",&b[i].ID);//录入时不要带域宽，会造成乱码。不知道为什么实际操作是这样
        fscanf(fp,"%s",&b[i].name);
        for(j=0; j<3; j++)
        {
            fscanf(fp,"%d",&b[i].score[j]);
        }
        fscanf(fp,"%d",&b[i].sum);
    }
    fclose(fp);
    printf("打印从文本中读出的所有学生信息！\n");
    printf("学号    姓名     语文    数学    英语   总分\n");
    for(i=0; i<t; i++)
    {
        printf("%ld    %4s",b[i].ID,b[i].name);
        for(j=0; j<3; j++)
        {
            printf("%8d",b[i].score[j]);
        }
        printf("%8d\n",b[i].sum);
    }
    printf("最高分的学生！\n");
    max=b[0].sum;
    n=0;
    for(i=0; i<t; i++)
    {
        if(max<b[i].sum)
        {
            n=i;
        }
    }
    printf("%ld    %4s",b[n].ID,b[n].name);
    for(j=0; j<3; j++)
    {
        printf("%8d",b[n].score[j]);
    }
    printf("%8d",b[n].sum);
    return 0;
}
